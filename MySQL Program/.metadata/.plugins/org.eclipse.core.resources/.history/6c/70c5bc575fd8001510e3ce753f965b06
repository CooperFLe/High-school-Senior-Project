import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.nio.charset.StandardCharsets;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Arrays;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.SwingConstants;

import net.miginfocom.swing.MigLayout;

public class User {
	
	private String user;
	private String password;
	private JTextField username;
	private JPasswordField passwordField;
	private JPasswordField verifyPass;
	public User()
	{}
	
	public User(String user, String password)
	{
		this.user = user;
		this.password = password;
	}
	
	public void register()
	{
		JFrame frame = new JFrame("Register");
		JPanel panel = new JPanel(new MigLayout("fillx, wrap 2"));
		panel.add(new JLabel("Username", SwingConstants.RIGHT), "align right");
		username = new JTextField();
		panel.add(username, "grow");
		panel.add(new JLabel("Password", SwingConstants.RIGHT),"align right");
		passwordField = new JPasswordField();
		panel.add(passwordField, "grow");
		panel.add(new JLabel("Confirm Password", SwingConstants.RIGHT),"align right");
		verifyPass = new JPasswordField();
		panel.add(verifyPass, "grow");
		JButton confirm = new JButton("Confirm");
			confirm.setSize(new Dimension((int)(panel.getSize().getWidth()/4),(int)(panel.getSize().getHeight()*.3)));
			confirm.addActionListener( new ConfirmRegistration());
		panel.add(confirm,"align center, span 2");
		

	    JOptionPane.showMessageDialog(frame, panel, "Register", JOptionPane.PLAIN_MESSAGE);
	}
	
	public String getUser() {
		return user;
	}

	public void setUser(String user) {
		this.user = user;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	class ConfirmRegistration implements ActionListener
	{
		@Override
		public void actionPerformed(ActionEvent e) {
			if(username.getText().length() > 20)
				Popup.errorMessage("Password is longer than the 20 character limit");
			else
				if(!Arrays.toString(passwordField.getPassword()).equals(Arrays.toString(verifyPass.getPassword())))
					Popup.errorMessage("Passwords do not match");
				else
				{
					boolean taken = false;
					Connection conn = new Connector().conn;
					try{
						Statement s = conn.createStatement();
						ResultSet rs = s.executeQuery("SELECT user FROM users");
						while(rs.next())
							if(rs.getString(1).equalsIgnoreCase(username.getText()))
							{
								Popup.errorMessage("Username taken");
								taken = true;
							}
					}catch(Exception error){
						Popup.errorMessage(error);
					}
					if(!taken)
					{
						try{
							Statement s = conn.createStatement();							
							byte[] salt = PasswordEncryptionService.generateSalt();
							byte[] encPass = PasswordEncryptionService.getEncryptedPassword(passwordField.getPassword().toString(), salt);
							System.out.println("Salt: " + Arrays.toString(salt));
							System.out.println("encPass: " + Arrays.toString(encPass));
							s.execute("INSERT INTO users (user,password,entries,salt,password_length,salt_length) VALUES ('"
											+ username.getText() + "','" + new String(encPass,StandardCharsets.UTF_8) + "',1,'" 
											+ new String(salt,StandardCharsets.UTF_8) + "','" + encPass.length + "','" + salt.length + "')");
						}catch(Exception error){
							Popup.errorMessage(error);
						}
					}
				}
		}
	}
	
	public void ConfirmAction(){}
}
